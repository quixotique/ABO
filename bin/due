#!/usr/bin/perl -w

require 5;
use lib '/home/andrewb/lib';
use lib '/home/andrewb/ABO/lib';
use Getopt::Long;
use ABO;
use ABO::Utils qw(:format);

($Myname = $0) =~ s!.*/!!o;
sub usage
{
	my $fh = shift;
	printf $fh "Usage: $Myname [-file f] [-force] [-cash] [-verbose] [date]\n";
}

# Parse command-line options and arguments.

$opt_file = '';
$opt_force = 0;
$opt_cash = 0;
$opt_verbose = 0;
if (!GetOptions('file=s', 'force', 'cash', 'verbose'))
{
	usage(*STDERR);
	exit 1;
}

my $Abo = new ABO (
		-error => sub { print STDERR "$Myname: ", @_, "\n"; },
		-source => $opt_file eq '-'
			? \*STDIN
			: length($opt_file) ? $opt_file : undef,
		-regenerate_cache => $opt_force,
		-cash => $opt_cash,
		-verbose => $opt_verbose,
	) or exit 1;

my $to = @ARGV && $ARGV[0] ne 'now' ? $Abo->make_date(shift) : $Abo->today
	or exit 1;

my @out = ();
for my $t (grep { $_->date < $to + 1 } $Abo->transactions($to + 1, $to))
{
	for my $e ($t->entries)
	{
		push @out, [ $e->cdate, $e->account, $e->amount, $e->dbcr ]
			if ($e->dbcr eq 'db' && $e->account->is_receivable)
			|| ($e->dbcr eq 'cr' && $e->account->is_payable);
	}
}

my $w = $Abo->colwid_unsigned;
my $lastdate;
for my $o (sort { $a->[0] <=> $b->[0] } @out)
{
	my ($date, $ac, $amt, $dbcr) = @$o;
	if (!defined($lastdate) || $lastdate != $date)
	{
		print $date->format('%a %_d-%b-%Y');
		$lastdate = $date;
	}
	else
	{
		print ' ' x 15;
	}
	print ' ' x 3;
	print $dbcr eq 'cr' ? 'out' : 'in ';
	printf "%${w}s", $o->[2];
	print ' ';
	print $date < $to ? '*' : ' ';
	print ' ';
	printf "%.*s\n", 56 - $w, $ac->title;
}
