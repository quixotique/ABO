#!/usr/bin/env python2.7
# vim: sw=4 sts=4 et fileencoding=utf8 nomod
# Copyright 2013 Andrew Bettison

r'''Usage:
    pyabo chart [-fvqD] [--select=PRED]
    pyabo index [-fqD]
    pyabo acc [-bcfwWqD] [--remove=ACC...] [--width=COLUMNS] <account> [<period>...]
    pyabo journal [-fwWqD] [--remove=ACC...] [--width=COLUMNS] [<period>...]
    pyabo balance [-faWqD] [--select=PRED] [--remove=PRED...] [--width=COLUMNS] [<when>...]
    pyabo due [-faWqD] [--select=PRED] [--remove=PRED...] [--width=COLUMNS] [<when>...]
    pyabo profloss [-faWqD] [--select=PRED] [--remove=PRED...] [--width=COLUMNS] [<period>...]
    pyabo compa [-qD] <command> <word> <preword>
    pyabo -h | --help
    pyabo --version

Options:
    -h --help               Show this message
    --version               Show version and exit
    -D --debug              Log debug on stderr
    -q --quiet              Suppress information logging on stderr
    -f --force              Force re-population of transaction cache
    --select=PRED           Only show accounts satisfying PRED
    -w --wrap               Wrap long lines
    --width=COLUMNS         Maximum line length (default from 'COLUMNS' env var)
    -W --wide               Wide output, no maximum width
    -a --all                Show all accounts
    -b --bring-forward      Bring balance of previous transactions forward
    -c --control            Show control account
    -v --verbose            Show more information
    -r --remove=ACC         Remove account ACC

PRED = condition | disjunction
disjunction = conjunction "|" disjunction
conjunction = condition "&" conjunction
condition = "!" condition
condition = "=" TAG
condition = "/" GLOB
condition = ACC
'''

import sys
import logging
import locale
import os.path

try:
    import abo.config
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '..', 'lib'))
    import abo.config

def main():
    global abo
    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
    locale.setlocale(locale.LC_ALL, '')
    lang, enc = locale.getlocale()
    input_encoding = enc
    output_encoding = enc
    try:
        import docopt
    except ImportError:
        sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '..', 'lib', 'docopt'))
        import docopt
    opts = docopt.docopt(__doc__, version='0.1')
    if opts['compa']:
        func = cmd_compa
    else:
        if opts['<account>']:
            opts['<account>'] = opts['<account>'].decode(input_encoding)
        import abo.command
        for word, value in opts.iteritems():
            if type(value) is bool and value and hasattr(abo.command, 'cmd_' + word):
                func = getattr(abo.command, 'cmd_' + word)
                break
        else:
            fatal('unknown command : %s' % sys.argv[1])
    if opts['--debug'] or len(os.environ.get('PYABO_DEBUG', '')):
        pass
    elif opts['--quiet']:
        logging.disable(logging.INFO)
    else:
        logging.disable(logging.DEBUG)
    logging.debug("parsed options, func=%s", func.__name__)
    try:
        config = abo.config.Config().load(opts)
    except abo.config.ConfigException, e:
        fatal(unicode(e).encode(output_encoding))
    try:
        for line in func(config, opts):
            print line.encode(output_encoding)
    except:
        if opts['--debug']:
            raise
        import abo.text
        import abo.command
        try:
            raise
        except abo.command.InvalidArg, e:
            fatal(unicode(e).encode(output_encoding))
        except abo.text.LineError, e:
            fatal(unicode(e).encode(output_encoding))
    sys.exit(0)

def fatal(message, status=1):
    print >>sys.stderr, "%s: %s" % (os.path.basename(sys.argv[0]), message)
    sys.exit(status)

def cmd_compa(config, opts):
    import abo.account
    word, preword = opts['<word>'], opts['<preword>']
    logging.debug('word=%r preword=%r', word, preword)
    keys = set()
    if preword == 'pyabo':
        import abo.command
        for key, value in opts.iteritems():
            if type(value) is bool and hasattr(abo.command, 'cmd_' + key):
                if key.startswith(word) and len(key) > len(word):
                    keys.add(key + ' ')
    elif preword == 'acc':
        chart = abo.account.Chart.from_file(file(config.chart_file_path))
        for key in chart.iterkeys():
            if key.startswith(word):
                comp = key[len(word):]
                end = ''
                if ':' in comp:
                    comp = comp.split(':', 1)[0] + ':'
                else:
                    end = ' '
                keys.add(shell_quote(word + comp) + end)
    keys = sorted(keys)
    logging.debug('keys=%r', keys)
    return keys

def shell_quote(text):
    return (text.replace('\\', '\\\\')
                .replace('"', '\\"')
                .replace("'", "\\'")
                .replace('$', '\\$')
                .replace('`', '\\`')
                .replace(' ', '\\ '))

if __name__ == '__main__':
    main()
