#!/usr/bin/env python2.7
# vim: sw=4 sts=4 et fileencoding=utf8 nomod
# Copyright 2013 Andrew Bettison

'''Usage:
    pyabo chart [-fvD] [AL|PL|EQ]
    pyabo index [-fD]
    pyabo acc [-bfwWD] [--remove=PRED...] [--width=COLUMNS] [--wide] <account> [<period>...]
    pyabo journal [-fwWD] [--remove=PRED...] [--width=COLUMNS] [<period>...]
    pyabo balance [-faWD] [--remove=PRED...] [--width=COLUMNS] [<when>...]
    pyabo profloss [-faWD] [--remove=PRED...] [--width=COLUMNS] [--select=PRED] [<period>...]
    pyabo compa [-D] <command> <word> <preword>
    pyabo -h | --help
    pyabo --version
Options:
    -h --help               Show this message
    --version               Show version and exit
    -D --debug              Log debug on stderr
    -f --force              Force re-population of transaction cache
    --tag=TAG               Only show tagged accounts
    -w --wrap               Wrap long lines
    --width=COLUMNS         Maximum line length (default from 'COLUMNS' env var)
    -W --wide               Wide output, no maximum width
    -a --all                Show all accounts
    -b --bring-forward      Bring balance of previous transactions forward
    -v --verbose            Show more information
    -r --remove=ACC         Remove account ACC
'''

import sys
import logging
import locale
import os.path

try:
    import abo.config
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '..', 'lib'))
    import abo.config

def main():
    global abo
    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
    locale.setlocale(locale.LC_ALL, '')
    lang, enc = locale.getlocale()
    output_encoding = enc
    if len(sys.argv) == 5 and sys.argv[1] == 'compa':
        # optimisation
        func = cmd_compa
        opts = {
            '--debug': False,
            '--wide': None,
            '--width': None,
            '<command>': sys.argv[2],
            '<word>': sys.argv[3],
            '<preword>': sys.argv[4]
        }
    else:
        try:
            import docopt
        except ImportError:
            sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '..', 'lib', 'docopt'))
            import docopt
        opts = docopt.docopt(__doc__, version='0.1')
        import abo.command
        if opts['acc']:
            func = abo.command.cmd_acc
        elif opts['journal']:
            func = abo.command.cmd_journal
        elif opts['chart']:
            func = abo.command.cmd_chart
        elif opts['index']:
            func = abo.command.cmd_index
        elif opts['profloss']:
            func = abo.command.cmd_profloss
        elif opts['balance']:
            func = abo.command.cmd_balance
        elif opts['compa']:
            func = cmd_compa
        else:
            assert False, 'unknown command'
    if not opts['--debug']:
        logging.disable(logging.DEBUG)
    logging.debug("parsed options, func=%s", func.__name__)
    try:
        config = abo.config.Config().load(opts)
    except abo.config.ConfigException, e:
        fatal(unicode(e).encode(output_encoding))
    try:
        for line in func(config, opts):
            print line.encode(output_encoding)
    except abo.command.InvalidArg, e:
        fatal(unicode(e).encode(output_encoding))
    sys.exit(0)

def fatal(message, status=1):
    print >>sys.stderr, "%s: %s" % (os.path.basename(sys.argv[0]), message)
    sys.exit(status)

def cmd_compa(config, opts):
    import abo.account
    word, preword = opts['<word>'], opts['<preword>']
    logging.debug('word=%r preword=%r', word, preword)
    chart = abo.account.Chart.from_file(file(config.chart_file_path))
    keys = set()
    if preword not in ('--width',):
        for key in chart.iterkeys():
            if key.startswith(word) and len(key) > len(word):
                comp = key[len(word):]
                end = ''
                if ':' in comp:
                    comp = comp.split(':', 1)[0] + ':'
                else:
                    end = ' '
                keys.add(shell_quote(word + comp) + end)
    keys = sorted(keys)
    logging.debug('keys=%r', keys)
    return keys

def shell_quote(text):
    return (text.replace('\\', '\\\\')
                .replace('"', '\\"')
                .replace("'", "\\'")
                .replace('$', '\\$')
                .replace('`', '\\`')
                .replace(' ', '\\ '))

if __name__ == '__main__':
    main()
