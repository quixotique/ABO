#!/usr/bin/env python2.7
# vim: sw=4 sts=4 et fileencoding=utf8 nomod
# Copyright 2013 Andrew Bettison

import sys
import locale
import codecs
import os
import os.path
import errno
import cPickle as pickle
import textwrap

try:
    import abo.journal
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '..', 'lib'))
    import abo.journal
import abo.config
import abo.period
import abo.balance

def main():
    locale.setlocale(locale.LC_ALL, '')
    lang, enc = locale.getlocale()
    output_encoding = enc
    func = globals()['cmd_' + sys.argv[1]]
    config = abo.config.config()
    transactions = []
    caches = []
    for path in config.input_file_paths:
        caches.append(TransactionCache(path, abo.journal.Journal(file(path))))
    for cache in caches:
        transactions += cache.transactions()
    transactions.sort(key=lambda t: (t.date, t.who or '', t.what or '', -t.amount()))
    for line in func(transactions, sys.argv[2:]):
        print line.encode(output_encoding)

def cmd_journal(transactions, args):
    if args:
        range = parse_range(args)
        transactions = filter_period(transactions, range)
    else:
        range = abo.balance.Range(None, None)
    width = max(50, abo.config.output_width())
    aw = 15
    dw = 11
    bw = abo.config.money_column_width()
    pw = max(1, width - dw - 2 - 1 - aw - 1 - bw - 1 - 2)
    fmt = u'%-{dw}.{dw}s  %-{pw}.{pw}s %{bw}s %-2.2s %-{aw}.{aw}s'.format(**locals())
    yield 'JOURNAL OF TRANSACTIONS'.center(width)
    yield range_line(range).center(width)
    yield fmt % ('-' * dw, '-' * pw, '-' * bw, '--', '-' * aw)
    for t in transactions:
        desc = textwrap.wrap(t.description(), width=pw)
        entries = list(t.entries)
        def entry_fields(e):
            return (abo.config.format_money(abs(e.amount)), ('db' if e.amount < 0 else 'cr'), e.account)
        yield fmt % ((t.date.strftime(ur'%_d-%b-%Y'), desc.pop(0)) + entry_fields(entries.pop(0)))
        while desc or entries:
            yield fmt % (('', desc.pop(0) if desc else u'') + (entry_fields(entries.pop(0)) if entries else ('', '', '')))
    yield fmt % ('-' * dw, '-' * pw, '-' * bw, '--', '-' * aw)

def cmd_acc(transactions, args):
    account = args.pop(0)
    if args:
        range = parse_range(args)
        transactions = filter_period(transactions, range)
    else:
        range = abo.balance.Range(None, None)
    width = max(50, abo.config.output_width())
    dw = 11
    mw = abo.config.money_column_width()
    bw = abo.config.balance_column_width()
    pw = max(1, width - dw - 2 - 2 * (mw + 1) - 1 - bw)
    fmt = u'%-{dw}.{dw}s  %-{pw}.{pw}s %{mw}s %{mw}s %{bw}s'.format(**locals())
    yield 'STATEMENT OF ACCOUNT'.center(width)
    yield range_line(range).center(width)
    yield fmt % ('-' * dw, '-' * pw, '-' * mw, '-' * mw, '-' * bw)
    balance = 0
    for t in transactions:
        for e in t.entries:
            if e.account == account:
                balance += e.amount
                desc = textwrap.wrap(e.description(), width=pw)
                yield fmt % (e.transaction.date.strftime(ur'%_d-%b-%Y'),
                        desc.pop(0),
                        abo.config.format_money(-e.amount) if e.amount < 0 else '',
                        abo.config.format_money(e.amount) if e.amount > 0 else '',
                        abo.config.format_money(balance)
                    )
                while desc:
                    yield fmt % ('', desc.pop(0), '', '', '')
    yield fmt % ('-' * dw, '-' * pw, '-' * mw, '-' * mw, '-' * bw)

def parse_range(args):
    periods = abo.period.parse_periods(args)
    if len(periods) > 1:
        raise ValueError('too many periods')
    return abo.balance.Range(*periods[0])
    
def filter_period(transactions, range):
    return [t for t in transactions if t.date in range]

def range_line(range):
    p = []
    if range.start is not None:
        p.append('FROM')
        p.append(range.start.strftime(ur'%_d-%b-%Y'))
    if range.end is not None:
        p.append('TO')
        p.append(range.end.strftime(ur'%_d-%b-%Y'))
    return ' '.join(p) if p else 'ALL'

class TransactionCache(object):

    def __init__(self, path, transaction_source):
        self.path = path
        self.transaction_source = transaction_source

    def cache_path(self):
        return os.path.join(os.environ.get('TMPDIR', '/tmp'), 'pyabo', os.path.abspath(self.path).replace('/', '%%'))

    def transactions(self):
        cpath = self.cache_path()
        if self.mtime(cpath) < self.mtime(self.path):
            transactions = self.transaction_source.transactions()
            try:
                os.makedirs(os.path.dirname(cpath))
            except OSError, e:
                if e.errno != errno.EEXIST:
                    raise
            pickle.dump(transactions, file(cpath, 'w'))
        else:
            return pickle.load(file(cpath))
        return transactions

    @staticmethod
    def mtime(path):
        try:
            return os.stat(path).st_mtime
        except OSError, e:
            if e.errno != errno.ENOENT:
                raise
            return -1

if __name__ == '__main__':
    main()
