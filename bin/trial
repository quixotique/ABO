#!/usr/bin/perl -w

require 5;
use lib '/home/andrewb/lib';
use lib '/home/andrewb/ABO/lib';

use Getopt::Long;
use ABO;
use ABO::Utils qw(:format :array max empty);
use ABO::Paginator;

$width_default = 80;
$width_min = 50;
$lines_default = 0;

($Myname = $0) =~ s!.*/!!o;
sub Usage
{
	print STDERR
"Usage: $Myname [-help] [<options> ...]

Print a trial account.

   -from <date>  Omit transactions before <date>, bringing forward the
                 balance of all asset/liability accounts.
   -to <date>    Omit transactions after <date>.
   -file <f>     Read transactions from the named file (a file of -
		 means standard input) instead of the ABO document base.
   -force        Force re-compilation of all source documents.
   -wrap         Wrap long descriptions onto following lines instead of
                 truncating them to a single line.
   -width N      Fit output into N columns [default $width_default, minimum $width_min].
   -lines N      Page output into pages of N lines each [default $lines_default].
   -ff           Eject pages using ASCII FF character instead of blank
                 lines.
   -crff         Eject pages using ASCII CR FF sequence instead of blank
                 lines.
   -cash         Convert accrual accounts into cash accounts.
";
}

# Parse command-line options and arguments.

$opt_help = 0;
$opt_from = '';
$opt_to = '';
$opt_force = 0;
$opt_cash = 0;
$opt_verbose = 0;
$opt_file = '';
undef $opt_width;
$opt_lines = $lines_default;
$opt_wrap = 0;
$opt_ff = 0;
$opt_crff = 0;
if (!GetOptions(
		'help',
		'from=s', 'to=s', 'file=s', 'force', 'cash', 'verbose',
		'wrap', 'width=i', 'lines=i', 'ff', 'crff', 'ext',
	)
)
{
	&Usage;
	exit 1;
}
if ($opt_help)
{
	&Usage;
	exit 0;
}

my $width = 0 + pick $opt_width, $ENV{'COLUMNS'}, $width_default;
$width = $width_min if $width < $width_min;
my $lines = $opt_lines;

# Initialise accounting system.

my $Abo = new ABO (
		-error => \&error,
		-source => $opt_file eq '-'
			? \*STDIN
			: length($opt_file) ? $opt_file : undef,
		-regenerate_cache => $opt_force,
		-cash => $opt_cash,
		-verbose => $opt_verbose,
	) or exit 1;

# Parse date arguments.

my $from = $Abo->parse_from_date($opt_from) or exit 1;
my $to = $Abo->parse_to_date($opt_to) or exit 1;

my $Acc = $Abo->account_list;

my $ex = $Abo->get_period_summary($from, $to);

# Print the report.

my $dfmt = '%_d-%b-%Y';
my $head = $Abo->var('heading');
my $fromto = fromtostr($from, $to);
my $shorttitle = '';
my $headings = '';
my $pagenum = 0;

open OSTDOUT, ">&STDOUT" or die "cannot dup STDOUT - $!";
my $ostdout = \*OSTDOUT;
my $pager = tie *STDOUT, ABO::Paginator, $ostdout or die;

$pager->lines_per_page($lines);
$pager->ff_str($opt_crff ? "\r\f" : $opt_ff ? "\f" : undef);
$pager->header(sub {
		if (++$pagenum > 1)
		{
			my $s = "Page $pagenum";
			my $n = $width - length($s) - 1;
			printf "%-${n}.${n}s $s\n", $shorttitle;
			print "\n";
			print $headings if length($headings);
		}
	});
$pager->footer(2, sub {
		print "\n";
		printf "%${width}s\n", 'Continued...';
	});

print centrestr($width, uc $head), "\n" if !empty $head;
print centrestr($width, 'TRIAL ACCOUNT'), "\n";
print centrestr($width, $fromto), "\n" if length $fromto;
$shorttitle = 'TRIAL ACCOUNT '.$fromto;
print "\n";
my $bal = $Abo->make_money(0);
my $fw = max(7, $Abo->colwid_signed);
my $nw = max(7, $Abo->colwid_unsigned);
my $bw = max(7, $Abo->colwid_signed);
my $pw = $width - 17 - $fw - $nw - $nw - $bw;
my $fmt = "%-12.12s %-${pw}.${pw}s %${fw}s %${nw}s %${nw}s %${bw}s\n";
$headings =
	sprintf($fmt, 'Account', 'Title', 'B/forwd', 'Debits', 'Credits', 'Balance').
	sprintf($fmt, '-'x12, '-'x$pw, '-'x$fw, '-'x$nw, '-'x$nw, '-'x$bw);
print $headings;
for $ac (sort { fulltitle($a) cmp fulltitle($b) } keys %$ex)
{
	my $b = $ex->{$ac}->{bf} + $ex->{$ac}->{cr} - $ex->{$ac}->{db};
	$bal += $b;
	if ($b || $ex->{$ac}->{bf} || $ex->{$ac}->{db} || $ex->{$ac}->{cr})
	{
		my $desc = fulltitle($ac);
		my ($part, @part) = $opt_wrap ? wrap($desc, $pw) : ($desc);
		$pager->need_lines(@part + 1);
		printf $fmt,
			$ac,
			$part,
			&myfmtwamt($ex->{$ac}->{bf} || '-', $nw),
			&myfmtwamt($ex->{$ac}->{db} || '-', $nw),
			&myfmtwamt($ex->{$ac}->{cr} || '-', $nw),
			&myfmtwamt($b || '-', $bw);
		printf $fmt, '', $_, '', '', '' foreach @part;
	}
}
$pager->footer(0, undef);
$pager->need_lines(2);
printf $fmt, '', '', '-'x$fw, '-'x$nw, '-'x$nw, '-'x$bw;
printf $fmt, '', 'Sum of balances', '', '', '', &fmtwamt($bal, $bw);

undef $pager;
close STDOUT;
untie *STDOUT;
*STDOUT = $ostdout;

exit 0;

sub myfmtwamt
{
	my $n = shift;
	return '' unless length $n;
	return '-  ' if $n eq '-';
	return &fmtwamt($n, shift);
}

sub myfmtamt_troff
{
	my $n = shift;
	return '' unless length $n;
	return '-\\0\\0' if $n eq '-';
	return $n;
}

sub fulltitle
{
	my $ac = $Acc->get_account_byname($_[0]);
	return 'Payable: '.$ac->title if $ac->is_payable;
	return 'Receivable: '.$ac->title if $ac->is_receivable;
	return $ac->title;
}

sub error
{
	print STDERR "$Myname: ", @_, "\n";
}
