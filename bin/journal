#!/usr/bin/perl -w

require 5;
use lib '/home/andrewb/lib';
use lib '/home/andrewb/ABO/lib';

use Getopt::Long;
use ABO;
use ABO::Utils qw(:format :array empty);
use ABO::Paginator;

$width_default = 80;
$width_min = 50;
$lines_default = 0;

($Myname = $0) =~ s!.*/!!o;
sub Usage
{
	print STDERR
"Usage: $Myname [-help] [<options> ...]

Print a journal of transactions.

   -from <date>  Omit transactions before <date>, bringing forward the
                 balance of all asset/liability accounts.
   -to <date>    Omit transactions after <date>.
   -file <f>     Read transactions from the named file (a file of -
		 means standard input) instead of the ABO document base.
   -force        Force re-compilation of all source documents.
   -wrap         Wrap long descriptions onto following lines instead of
                 truncating them to a single line.
   -width N      Fit output into N columns [default $width_default, minimum $width_min].
   -lines N      Page output into pages of N lines each [default $lines_default].
   -ff           Eject pages using ASCII FF character instead of blank
                 lines.
   -crff         Eject pages using ASCII CR FF sequence instead of blank
                 lines.
   -cash         Convert accrual accounts into cash accounts.
   -verbose      Whistle as you work.
";
}

# Parse command-line options and arguments.

$opt_help = 0;
$opt_from = '';
$opt_to = '';
$opt_force = 0;
$opt_cash = 0;
$opt_verbose = 0;
$opt_file = '';
undef $opt_width;
$opt_lines = $lines_default;
$opt_wrap = 0;
$opt_ff = 0;
$opt_crff = 0;
if (!GetOptions(
		'help',
		'from=s', 'to=s', 'file=s', 'force', 'cash',
		'wrap', 'width=i', 'lines=i', 'ff', 'crff',
		'verbose',
	)
)
{
	&Usage;
	exit 1;
}
if ($opt_help)
{
	&Usage;
	exit 0;
}

my $width = 0 + pick $opt_width, $ENV{'COLUMNS'}, $width_default;
$width = $width_min if $width < $width_min;
my $lines = $opt_lines;

# Initialise accounting system.

my $Abo = new ABO (
		-error => \&error,
		-source => $opt_file eq '-'
			? \*STDIN
			: length($opt_file) ? $opt_file : undef,
		-regenerate_cache => $opt_force,
		-cash => $opt_cash,
		-verbose => $opt_verbose,
	) or exit 1;

# Parse date arguments.

my $from = $Abo->parse_from_date($opt_from) or exit 1;
my $to = $Abo->parse_to_date($opt_to) or exit 1;

my @trans = $Abo->transactions($from, $to);

my $head = $Abo->var('heading');
my $fromto = fromtostr($from, $to);
my $shorttitle = '';
my $headings = '';
my $pagenum = 0;

# Set up paginated output.

open OSTDOUT, ">&STDOUT" or die "cannot dup STDOUT - $!";
my $ostdout = \*OSTDOUT;
my $pager = tie *STDOUT, ABO::Paginator, $ostdout or die;
$pager->lines_per_page($lines);
$pager->ff_str($opt_crff ? "\r\f" : $opt_ff ? "\f" : undef);
$pager->header(sub {
		if (++$pagenum > 1)
		{
			my $s = "Page $pagenum";
			my $n = $width - length($s) - 1;
			printf "%-${n}.${n}s $s\n", $shorttitle;
			print "\n";
			print $headings if length($headings);
		}
	});
$pager->footer(2, sub {
		print "\n";
		printf "%${width}s\n", 'Continued...';
	});

print centrestr($width, uc $head), "\n" if !empty $head;
print &centrestr($width, 'JOURNAL OF TRANSACTIONS'), "\n";
print &centrestr($width, $fromto), "\n" if length $fromto;
print "\n";
$shorttitle = 'JOURNAL OF TRANSACTIONS '.$fromto;
my $aw = 15;
my $bw = $Abo->colwid_unsigned;
my $pw = $width - 11 - 2 - 1 - $aw - 1 - $bw - 1 - 2;
my $fmt = "%-11.11s  %-${pw}.${pw}s %${bw}s %-2.2s %-${aw}.${aw}s\n";
$headings =
	sprintf($fmt,'Date', 'Particulars', 'Amount', 'DC', 'Account').
	sprintf($fmt, '-'x11, '-'x$pw, '-'x$bw, '-'x2, '-'x$aw);
print $headings;
for (my $i = 0; $i <= $#trans; $i++)
{
	my @e = $trans[$i]->entries;
	my @part = &wrap($trans[$i]->desc, $pw);
	$pager->need_lines($opt_wrap && @part > @e ? scalar @part : scalar @e);
	my $first = 1;
	for my $e (@e)
	{
		my $date = $e->date;
		my $dstr = $from && $date < $from ? '' : $date->format('%_d-%b-%Y');
		printf $fmt,
			$first ? $dstr : '',
			@part ? shift @part : '',
			fmtwamt($e->amount, $bw),
			$e->dbcr,
			$e->account;
		$first = 0;
	}
	if ($opt_wrap)
	{
		printf $fmt, '', $_, '', '', '' foreach @part;
	}
}
$pager->footer(0, undef);
$pager->need_lines(1);
printf $fmt, '-'x11, '-'x$pw, '-'x$bw, '-'x2, '-'x$aw;

undef $pager;
close STDOUT;
untie *STDOUT;
*STDOUT = $ostdout;
close STDOUT;
exit 0;

sub error
{
	print STDERR "$Myname: ", @_, "\n";
}
