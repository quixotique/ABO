#!/usr/bin/env python3
# vim:fileencoding=utf8 nomod

import sys
import locale
import argparse
import codecs
import re
import traceback
from datetime import datetime
from collections import defaultdict

def main():
    locale.setlocale(locale.LC_ALL, '')

    # Parse command line.
    parser = argparse.ArgumentParser()
    parser.add_argument('--decimal', '-d', action='store_true', help='print times as decimal h.hh instead of h:mm')
    parser.add_argument('path', nargs='+')
    args = parser.parse_args()

    Duration.format = staticmethod(Duration.format_hours_decimal if args.decimal else Duration.format_hours_minutes)

    # Process input files.
    result = Result()
    for path in args.path:
        result += process(path)

    # Print reports.
    print_calendar_report(result)
    print()
    print_task_report(result)

def process(path):
    # First pass to discover special labels.
    no_report_labels = set()
    not_payable_labels = set()
    skip_line_ids = set()
    daily_pay = None
    cursor = NoModeLinesCursor(FileCursor(path))
    cursor.advance()
    while not cursor.eof():
        tag = tagged_labels('EXCLUDE').parse(cursor)
        if tag:
            skip_line_ids.add(tag.line.id())
            no_report_labels.update(tag.labels)
            not_payable_labels.update(tag.labels)
            continue
        tag = tagged_labels('NOT PAID').parse(cursor)
        if tag:
            skip_line_ids.add(tag.line.id())
            not_payable_labels.update(tag.labels)
            continue
        cursor.advance()
    # Second pass to sum all the hours.
    cursor = NoModeLinesCursor(FileCursor(path))
    result = Result()
    try:
        cursor.advance()
        while not cursor.eof():
            if cursor.current().is_blank() or cursor.current().id() in skip_line_ids:
                cursor.advance()
                continue
            total = tagged_duration('TOTAL').parse(cursor)
            if total is not None:
                payable = result.logged.slice(exclude_labels=not_payable_labels)
                if total.minutes != payable.minutes:
                    raise ParseError('TOTAL [%s] does not equal payable total [%s]' % (
                                Duration.format(total.minutes), Duration.format(payable.minutes)),
                            line=total.line)
                continue
            pay = tagged_duration('PAY').parse(cursor)
            if pay is not None:
                daily_pay = pay
                continue
            day = Day.parse(cursor)
            if day is not None:
                day.payable = day.logged.slice(exclude_labels=not_payable_labels)
                day.reportable = day.logged.slice(exclude_labels=no_report_labels)
                if daily_pay and day.paid is None: day.paid = daily_pay.minutes
                result.add_day(day)
                continue
            raise ParseError('malformed line', line=cursor.current())
        return result
    except ParseError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

def format_duration_or_none(minutes):
    return Duration.format(minutes) if minutes is not None else '-'

def print_calendar_report(result):
    paidkeys = ('Paid',) if result.paid is not None else ()
    colfmt = '%10.10s'
    colrule = '-' * 10
    fmt = '%-16.16s ' + (' ' + colfmt) * (4 + len(result.reported) + len(paidkeys)) + ' %-25s'
    avfmt = '%-16.16s ' + (' ' + colfmt) * 2 + ' %s'
    reportkeys = sorted(result.reported)
    print(fmt % (('', 'Logged', 'Payable', 'Reportable', 'Reported') + tuple(reportkeys) + paidkeys + ('',)))
    print(fmt % (('',) + (colrule,) * (4 + len(reportkeys) + len(paidkeys)) + ('',)))
    for day in sorted(result.days):
        notes = []
        if day.is_pubhol:
            notes.append('public holiday')
        if day.is_personal:
            notes.append('personal')
        elif day.is_weekend:
            notes.append('weekend')
        elif day.paid == 0:
            notes.append('unpaid')
        reported_minutes = [day.reported[k].sum_labels() if k in day.reported else None for k in reportkeys]
        print(fmt % ((day.date.strftime('%a %_d %b %Y'),
                      format_duration_or_none(day.logged.minutes or None),
                      format_duration_or_none(day.payable.minutes or None),
                      format_duration_or_none(day.reportable.minutes or None),
                      format_duration_or_none(sum(m or 0 for m in reported_minutes) or None)) +
                      tuple(format_duration_or_none(m) for m in reported_minutes) +
                      ((format_duration_or_none(day.paid or None),) if paidkeys else ()) +
                      (', '.join(notes)[:25],)))
    print(fmt % (('',) + (colrule,) * (4 + len(reportkeys) + len(paidkeys)) + ('',)))
    print(fmt % (('TOTAL',
                  Duration.format(result.logged.minutes),
                  Duration.format(result.payable.minutes),
                  Duration.format(result.reportable.minutes)) +
                  ('',) * (1 + len(reportkeys)) +
                  ((format_duration_or_none(result.paid),) if paidkeys else ()) +
                  ('',)))
    def print_average(days, called):
        if days:
            s = 's' if days != 1 else ''
            print(avfmt % ('AVERAGE',
                           Duration.format(result.logged.minutes / days),
                           Duration.format(result.payable.minutes / days),
                           'per day over %u %s day%s' % (days, called, s)))
    print_average(result.days_paid, 'paid')
    print_average(result.days_working, 'working')
    print_average(result.days_logged, 'logged')

def print_task_report(result):
    w = str(max(map(len, result.all_labels)))
    colfmt = '%10.10s'
    colrule = '-' * 10
    fmt = '%-' + w + '.' + w + 's ' + (' ' + colfmt) * (len(result.reported) + 3)
    print(fmt % (('', 'Reportable', 'Reported', 'Unreported') + tuple(result.reported)))
    print(fmt % (('',) + (colrule,) * (len(result.reported) + 3)))
    total_reportable = 0
    total_unreported = 0
    total_reported = [0] * len(result.reported)
    for label in sorted(result.all_labels, key=label_sort_key):
        reportable_minutes = result.reportable.labels.get(label)
        report_minutes = [v.labels.get(label) for v in result.reported.values()]
        total_reportable += reportable_minutes or 0
        total_reported = [t + (m or 0) for t, m in zip(total_reported, report_minutes)]
        unreported_minutes = reportable_minutes
        if [m for m in [reportable_minutes] + report_minutes if m]:
            reported_minutes = sum(m or 0 for m in report_minutes) or None
            unreported_minutes = (reportable_minutes or 0) - (reported_minutes or 0) or None
            print(fmt % ((label, format_duration_or_none(reportable_minutes),
                                 format_duration_or_none(reported_minutes),
                                 format_duration_or_none(unreported_minutes)) +
                                 tuple(format_duration_or_none(m) for m in report_minutes)))
        total_unreported += unreported_minutes or 0
    print(fmt % (('',) + (colrule,) * (len(result.reported) + 3)))
    print(fmt % (('TOTAL', format_duration_or_none(total_reportable or None),
                           format_duration_or_none(sum(total_reported) or None),
                           format_duration_or_none(total_unreported or None)) +
                           tuple(format_duration_or_none(t or None) for t in total_reported)))

class Line(str):

    def id(self):
        return (self.file.name, self.lineno)

    def where(self):
        return '%s, line %s' % (self.file.name, self.lineno)

    def is_blank(self):
        return self == '' or self.isspace()

    def indent(self):
        return len(self) - len(self.lstrip())

    def without_indent(self):
        return self.lstrip()

class ParseError(Exception):

    def __init__(self, msg, line=None):
        if hasattr(line, 'where') and callable(line.where):
            msg = line.where() + ': ' + msg
        Exception.__init__(self, msg)
        self.line = line

class Cursor(object):

    def eof(self):
        return self._current is None

    def current(self):
        assert self._current is not None
        return self._current

    def advance(self):
        raise NotImplementedError()

    def __iter__(self):
        return self

    def next(self):
        self.advance()
        if self.eof():
            raise StopIteration()
        return self._current

class FileCursor(Cursor):

    def __init__(self, path):
        super(FileCursor, self).__init__()
        firstline = open(path).readline()
        enc = locale.getlocale()[1]
        if firstline:
            m = re.search(r'coding[=:]\s*([-\w.]+)', firstline)
            if m is not None:
                enc = m.group(1)
        self._file = codecs.open(path, 'r', enc)
        self._lineno = 0

    def advance(self):
        try:
            self._current = Line(next(self._file))
            self._lineno += 1
            self._current.file = self._file
            self._current.lineno = self._lineno
        except StopIteration:
            self._current = None
            self._lineno = None
        return self._current

class FilteredCursor(Cursor):

    def __init__(self, orig_cursor):
        super(FilteredCursor, self).__init__()
        self.orig = orig_cursor

    def filter(self, line):
        return True

    def advance(self):
        self._current = self.orig.advance()
        while not self.eof() and not self.filter(self._current):
            self._current = self.orig.advance()
        return self._current

class NoModeLinesCursor(FilteredCursor):

    def __init__(self, orig_cursor):
        super(NoModeLinesCursor, self).__init__(orig_cursor)

    def filter(self, line):
        return not (line.lineno <= 5 and line.startswith('vim:'))

class TotalMinutes(object):

    def __init__(self, minutes=None, labels=()):
        self.minutes = minutes
        self.labels = dict(labels)

    def __repr__(self):
        return '%s(minutes=%r, labels=%r)' % (type(self).__name__, self.minutes, self.labels)

    def copy(self):
        new = type(self)()
        new.minutes = self.minutes
        new.labels = self.labels.copy()
        return new

    def __nonzero__(self):
        return ((self.minutes or 0) + sum(self.labels.values())) != 0

    def __add__(self, other):
        new = self.copy()
        new += other
        return new

    def __sub__(self, other):
        new = self.copy()
        new -= other
        return new

    def __iadd__(self, other):
        if other.minutes is not None:
            self.minutes = (self.minutes or 0) + other.minutes
        for label, minutes in other.labels.items():
            self.labels[label] = self.labels.get(label, 0) + minutes
        return self

    def __isub__(self, other):
        if other.minutes is not None:
            self.minutes = (self.minutes or 0) - other.minutes
        for label, minutes in other.labels.items():
            m = self.labels.get(label, 0) - minutes
            if m:
                self.labels[label] = m
            else:
                del self.labels[label]
        return self

    def add(self, minutes, label=None):
        if label:
            self.labels[label] = self.labels.get(label, 0) + minutes
        else:
            self.minutes = (self.minutes or 0) + minutes

    def sum_labels(self):
        return sum(self.labels.values())

    def slice(self, include_only_labels=None, exclude_labels=frozenset()):
        self.validate_sum()
        slc = type(self)()
        for label in self.labels:
            if (include_only_labels is None or (label in include_only_labels)) and label not in exclude_labels:
                slc.add(self.labels[label], label)
        slc.minutes = slc.sum_labels()
        return slc

    def validate_sum(self):
        if self.minutes is not None:
            lsum = self.sum_labels()
            if lsum != self.minutes:
                raise ValueError('labels [%s] do not sum to total [%s]' % (Duration.format(lsum), Duration.format(self.minutes)))

def tagged_labels(tag_text):

    class Tag(object):

        def __init__(self, labels, line):
            self.labels = labels
            self.line = line

        @classmethod
        def parse(cls, cursor):
            if not cursor.eof():
                line = cursor.current()
                if line.without_indent().startswith(tag_text + ' '):
                    labels = line.without_indent()[len(tag_text) + 1:].split()
                    if labels:
                        cursor.advance()
                        return cls(labels, line)
            return None

    return Tag

def tagged_duration(tag_text):

    class Tag(object):

        def __init__(self, minutes, line):
            self.minutes = minutes
            self.line = line

        @classmethod
        def parse(cls, cursor):
            if not cursor.eof():
                line = cursor.current()
                if line.without_indent().startswith(tag_text + ' '):
                    d = Duration.parse(line, 0)
                    if d is not None and d.prefix == tag_text and line[d.end:].strip() == '':
                        cursor.advance()
                        return cls(d.minutes, line)
            return None

    return Tag

class Day(object):

    def __init__(self, date):
        self.date = date
        self.blocks = []
        self.is_pubhol = False
        self.is_personal = False
        self.is_weekend = False
        self.paid = None
        self.logged = TotalMinutes()
        self.payable = TotalMinutes()
        self.reportable = TotalMinutes()
        self.reported = defaultdict(TotalMinutes)

    def __lt__(self, other):
        if not isinstance(other, type(self)):
            return NotImplemented
        return self.date < other.date

    @classmethod
    def parse(cls, cursor):
        # Day stanzas must start with a non-indented line like "Day DD Mon YYYY".
        if cursor.eof() or cursor.current().is_blank() or cursor.current().indent() != 0:
            return None
        line = cursor.current()
        try:
            words = line.split(None, 5)
            day = cls(datetime.strptime(' '.join(words[:4]), '%a %d %b %Y'))
            comment = ' '.join(words[4:]).lower()
        except ValueError as ex:
            raise ParseError('malformed date: %s' % (ex,), line=line)
        day.is_pubhol = 'public holiday' in comment
        day.is_personal = 'sick' in comment or 'personal' in comment
        day.is_weekend = day.date.weekday() >= 5
        day.paid = 0 if day.is_weekend or 'unpaid' in comment or 'without pay' in comment else None
        cursor.advance()
        for block in Block.parseiter(cursor):
            day.blocks.append(block)
            day.logged += block.totals
            if block.pay is not None: day.paid = (day.paid or 0) + block.pay
            for label in block.reports:
                day.reported[label] += block.reports[label]
        return day

class Result(object):

    def __init__(self):
        self.days = []
        self.logged = TotalMinutes()
        self.payable = TotalMinutes()
        self.reportable = TotalMinutes()
        self.reported = defaultdict(TotalMinutes)
        self.paid = None
        self.days_paid = 0
        self.days_working = 0
        self.days_logged = 0

    def __iadd__(self, other):
        self.days += other.days
        self.logged += other.logged
        self.payable += other.payable
        self.reportable += other.reportable
        for label in other.reported:
            self.reported[label] += other.reported[label]
        if other.paid is not None: self.paid = (self.paid or 0) + other.paid
        self.days_paid += other.days_paid
        self.days_working += other.days_working
        self.days_logged += other.days_logged
        return self

    def add_day(self, day):
        self.days.append(day)
        self.logged += day.logged
        self.payable += day.payable
        self.reportable += day.reportable
        for label in day.reported:
            self.reported[label] += day.reported[label]
        if day.paid is not None:
            self.paid = (self.paid or 0) + day.paid
        if day.paid:
            self.days_paid += 1
        if not (day.is_pubhol or day.is_personal or day.is_weekend):
            self.days_working += 1
        if day.logged:
            self.days_logged += 1

    @property
    def all_labels(self):
        all_labels = set(self.logged.labels)
        for report in self.reported.values():
            all_labels |= set(report.labels)
        return all_labels

class Block(object):

    def __init__(self):
        self.totals = TotalMinutes()
        self.reports = defaultdict(TotalMinutes)
        self.pay = None
        self.tasklabel = None
        self.wildlabel = None

    @classmethod
    def parseiter(cls, cursor):
        while True:
            block = cls.parse(cursor)
            if block is None:
                break
            yield block

    @classmethod
    def parse(cls, cursor):
        # Blocks finish at EOF or the next non-blank non-indented line.
        while not cursor.eof() and cursor.current().is_blank():
            cursor.advance()
        if cursor.eof() or (not cursor.current().is_blank() and cursor.current().indent() == 0):
            return None
        block = cls()
        firstline = None
        # A Block is a contiguous series of non-blank indented lines.
        while not cursor.eof() and not cursor.current().is_blank() and cursor.current().indent():
            if block.pay is not None:
                raise ParseError('spurious line after PAY', line=cursor.current())
            pay = tagged_duration('PAY').parse(cursor)
            if firstline is None:
                firstline = cursor.current()
                if pay is not None:
                    block.pay = pay.minutes
                    continue
            elif pay is not None:
                raise ParseError('spurious line before PAY', line=firstline)
            bl = BlockLine.parse(cursor.current(), tasklabel=block.tasklabel, wildlabel=block.wildlabel)
            block.tasklabel = bl.tasklabel
            if bl.wildlabel:
                if block.wildlabel and bl.wildlabel != block.wildlabel:
                    raise ParseError('conflicting labels for [*]', line=firstline)
            block.wildlabel = bl.wildlabel
            block.totals += bl.totals
            for label in bl.reports:
                block.reports[label] += bl.reports[label]
            cursor.advance()
        if block.wildlabel:
            if block.totals.minutes is None:
                raise ParseError('missing total hours, cannot compute %s [*]' % block.wildlabel, line=firstline)
            lsum = block.totals.sum_labels()
            if lsum >= block.totals.minutes:
                raise ParseError('no hours to allocate to %s [*]' % block.wildlabel, line=firstline)
            block.totals.add(block.totals.minutes - lsum, label=block.wildlabel)
        if block.totals.minutes is None:
            block.totals.minutes = block.totals.sum_labels()
        try:
            block.totals.validate_sum()
        except ValueError as e:
            raise ParseError(str(e), line=firstline)
        return block

class BlockLine(object):

    def __init__(self):
        self.totals = TotalMinutes()
        self.reports = defaultdict(TotalMinutes)
        self.tasklabel = None
        self.wildlabel = None

    @classmethod
    def parse(cls, line, tasklabel=None, wildlabel=None):
        bl = cls()
        bl.tasklabel = tasklabel
        bl.wildlabel = wildlabel
        label = None
        lastpos = 0
        rminutes = None
        # Consume the line as either:
        #   Range [ "," Range ]* Duration
        #   tasklabel Duration
        #   [ "=" ] reportlabel Duration
        while True:
            d = Duration.parse(line, lastpos)
            r = Range.parse(line, lastpos)
            if r is None and (d is None or d.prefix) and rminutes is not None and label is None:
                # after at least one Range, either a missing Duration or a Duration with some preceding text
                # tell the user what we calculate the total duration ought to be
                print('%s: time range missing total [%s]' % (line.where(), Duration.format(rminutes)))
            if d is None and r is None:
                # found Neither Range nor Duration
                break
            if r is None or (d is not None and d.start < r.start):
                # found Duration
                is_report = False
                label = None
                if d.prefix:
                    words = d.prefix.split()
                    if len(words) == 1:
                        label = words[0]
                    elif len(words) == 2 and words[0] == '=':
                        is_report = True
                        label = words[1]
                    else:
                        raise ParseError('malformed label before %s' % (d.text,), line=line)
                if d.minutes is None: # wild "[*]"
                    if rminutes is not None:
                        raise ParseError('%s following time range' % (d.text,), line=line)
                    if not label:
                        raise ParseError('missing label before %s' % (d.text,), line=line)
                    if is_report:
                        raise ParseError('%s not valid for reported time' % (d.text,), line=line)
                    if bl.wildlabel and bl.wildlabel != label:
                        raise ParseError('conflifting label "%s" before %s (is already "%s")' % (label, d.text, bl.wildlabel), line=line)
                    bl.tasklabel = label
                    bl.wildlabel = label
                elif rminutes is not None:
                    if rminutes != d.minutes:
                        raise ParseError('%s != total %s' % (d.text, Duration.format(rminutes)), line=line)
                    rminutes = None
                elif is_report:
                    if bl.tasklabel is None:
                        raise ParseError('%s report without prior task label' % (label,), line=line)
                    bl.reports[label].add(d.minutes, label=bl.tasklabel)
                else:
                    bl.tasklabel = label
                    bl.totals.add(d.minutes, label=label)
                lastpos = d.end
            else:
                # found Range
                if r.prefix:
                    label = r.prefix.split()[-1]
                    rminutes = None
                rminutes = (rminutes or 0) + r.minutes
                bl.totals.add(r.minutes, label=label)
                bl.tasklabel = None
                bl.wildlabel = None
                lastpos = r.end
        return bl

class Duration(object):

    re_duration = re.compile(r'\[\s*(?:(?:(?P<h1>\d*)(?P<m1>¼|½|¾|⅓|⅔|⅕|⅖|⅗|⅘|:\d\d|\.\d+)h?)|(?:(?:(?P<h2>\d+)\s*[hH])?\s*(?:(?P<m2>\d+)\s*[mM])?)|(?P<wild>\*)|0)\s*\]')

    @classmethod
    def parse(cls, line, start=0):
        mt = cls.re_duration.search(line, start)
        if mt is None:
            return None
        if mt.group('wild'):
            tminutes = None
        else:
            hours = mt.group('h1') or mt.group('h2') or '0'
            minutes = mt.group('m1') or mt.group('m2') or ''
            tminutes = int(hours) * 60
            if minutes.isdigit():
                tminutes += int(minutes)
            elif minutes.startswith(':'):
                tminutes += int(minutes[1:])
            elif minutes.startswith('.'):
                tminutes += int(float(minutes) * 60)
            elif minutes == u'¼':
                tminutes += 15
            elif minutes == u'½':
                tminutes += 30
            elif minutes == u'¾':
                tminutes += 45
            elif minutes == u'⅓':
                tminutes += 20
            elif minutes == u'⅔':
                tminutes += 40
            elif minutes == u'⅕':
                tminutes += 12
            elif minutes == u'⅖':
                tminutes += 24
            elif minutes == u'⅗':
                tminutes += 36
            elif minutes == u'⅘':
                tminutes += 48
            elif minutes != '':
                raise ParseError('invalid duration: %s' % mt.group(0), line=line)
        dur = cls()
        dur.text = mt.group(0)
        dur.start = mt.start(0)
        dur.end = mt.end(0)
        dur.prefix = line[start:mt.start(0)].strip(' ,:')
        dur.minutes = tminutes
        return dur

    @staticmethod
    def format_hours_decimal(minutes):
        return '%.2f' % (minutes / 60.0,)

    @staticmethod
    def format_hours_minutes(minutes):
        sign = ''
        if minutes < 0:
            sign = '-'
            minutes = -minutes
        h = minutes // 60
        m = minutes % 60
        return '%s%u:%02u' % (sign, h, m)

    format = format_hours_minutes

    def __repr__(self):
        return self.prefix + ' [' + (self.format(self.minutes) if self.minutes is not None else '*') + ']'

class Range(object):

    re_timerange = re.compile(r'(\d?\d):(\d\d)\s*-\s*(\d?\d):(\d\d)')

    @classmethod
    def parse(cls, line, start=0):
        mr = cls.re_timerange.search(line, start)
        if mr is None:
            return None
        starttime = int(mr.group(1)) * 60 + int(mr.group(2))
        endtime = int(mr.group(3)) * 60 + int(mr.group(4))
        if endtime < starttime:
            # allow end times past midnight if the resulting range is less than 8 hours
            endtime += 24 * 60
            if endtime < starttime or endtime - starttime > 8 * 60:
                raise ParseError("invalid range: %s" % mr.group(0), line=line)
        prefix = line[start:mr.start(0)].strip(' ,:')
        tr = cls()
        tr.text = mr.group(0)
        tr.start = mr.start(0)
        tr.end = mr.end(0)
        tr.prefix = line[start:mr.start(0)].strip(' ,:')
        tr.start_minutes = starttime
        tr.end_minutes = endtime
        tr.minutes = endtime - starttime
        return tr

_re_label_sort_key = re.compile(r'([A-Za-z_]+|\d+|[^A-Za-z_\d]+)')

def label_sort_key(label):
    return [('{:0>10}'.format(p) if p.isdecimal() else p.lower() if p.isalpha() else '') for p in _re_label_sort_key.split(label)]

if __name__ == '__main__':
    main()
