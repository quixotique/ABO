#!/usr/bin/env python3.11
# vim: sw=4 sts=4 et fileencoding=utf8 nomod
# Copyright 2013-2014 Andrew Bettison

style_name = 'Password'

__doc__ = f'''Usage:
    expunge-odt-passwords [-D] [--style-name=STYLE] <unsafe> [<safe>]
    expunge-odt-passwords --test
    expunge-odt-passwords --version
    expunge-odt-passwords -h | --help

Options:
    -h --help               Print this message
       --version            Print version and exit
    -D --debug              Log debug on stderr
       --test               Run internal tests
       --style-name=STYLE   Replace text styled as STYLE (default {style_name!r})

If no <safe> filename is given, then forms it from the <unsafe> filename by
replacing "(unsafe)" with "(safe)" in the stem, or appending "(safe)" to the
stem, eg: "document (unsafe).odt" -> "document (safe).odt".

'''

version = '1'

import sys
import logging
import re
import os.path
import zipfile
import xml.etree.ElementTree
import io

def main():
    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '..', 'lib', 'docopt'))
    import docopt
    opts = docopt.docopt(__doc__, sys.argv[1:], version=version)
    if not opts['--debug']:
        logging.disable(logging.DEBUG)
    if opts['--test']:
        import doctest
        failures, tests = doctest.testmod()
        sys.exit(0 if failures == 0 else 1)
    unsafe_path = opts['<unsafe>']
    safe_path = opts['<safe>']
    if not safe_path:
        safe_path = form_safe_path(unsafe_path)
        if safe_path == unsafe_path:
            fatal('already safe: %s' % unsafe_path)
    logging.debug('safe_path = %r' % safe_path)
    with zipfile.ZipFile(unsafe_path) as inzip, \
         zipfile.ZipFile(safe_path, 'w') as outzip:
        logging.debug(f'inzip = {inzip!r}, outzip = {outzip!r}')
        for info in inzip.infolist():
            logging.debug(f'info = {info!r}')
            if info.is_dir():
                outzip.mkdir(info)
            elif info.filename == 'content.xml':
                with inzip.open("content.xml") as indoc:
                    tree = xml.etree.ElementTree.parse(indoc)
                    root = tree.getroot()
                    logging.debug('root = %r' % root)
                    for span in root.iter(ns_text + 'span'):
                        if span.get(ns_text + 'style-name') == style_name:
                            for child in span.iter():
                                if child.text:
                                    expunged = 'X' * len(child.text)
                                    print(f'{child.text!r} -> {expunged!r}')
                                    child.text = expunged
                    outbuf = io.BytesIO()
                    tree.write(outbuf, xml_declaration=True, encoding='UTF-8')
                    outzip.writestr(info, outbuf.getvalue())
            else:
                outzip.writestr(info, inzip.read(info))

ns_text = "{urn:oasis:names:tc:opendocument:xmlns:text:1.0}"

def form_safe_path(unsafe_path):
    r'''
        >>> form_safe_path("abc.doc")
        'abc (safe).doc'
        >>> form_safe_path("abc (UNSAFE) def.doc")
        'abc (SAFE) def.doc'
        >>> form_safe_path("abc (safe).doc")
        'abc (safe).doc'
    '''
    re_safe = re.compile(r'\(safe\)', re.IGNORECASE)
    re_unsafe = re.compile(r'\(un(safe)\)', re.IGNORECASE)
    if re_safe.search(unsafe_path):
        return unsafe_path
    safe_path = re_unsafe.sub(r'(\1)', unsafe_path)
    if safe_path == unsafe_path:
        root, ext = os.path.splitext(unsafe_path)
        safe_path = root.rstrip() + " (safe)" + ext
    return safe_path

def fatal(message, status=1, usage=False):
    print("%s: %s" % (os.path.basename(sys.argv[0]), message), file=sys.stderr)
    sys.exit(status)

if __name__ == '__main__':
    main()
