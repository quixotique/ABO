#!/usr/bin/env python3
# vim: sw=4 sts=4 et fileencoding=utf8 nomod
# Copyright 2023 Andrew Bettison

'''Usage:
    med [-Dgn] [--period=PERIOD] <path>...
    med --test
    med --version
    med -h | --help

Options:
    -g --graph              Produce SVG graph
    -p --period=PERIOD      Limit graph to given period
    -n --no-now-line        Omit the "now" line from graph
    -D --debug              Log debug on stderr
    -h --help               Print this message
       --version            Print version and exit
       --test               Run internal tests
'''

import sys
import shutil
import os.path
import logging
import re
from datetime import time as timeofday, datetime, timedelta

try:
    import abo.time
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '..', 'lib'))
    import abo.time

import abo.period
import abo.text
from abo.types import struct

graph_line_min = 0.
graph_line_max = 200.

def main():
    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '..', 'lib', 'docopt'))
    import docopt
    opts = docopt.docopt(__doc__, sys.argv[1:], version='1')
    if not opts['--debug']:
        logging.disable(logging.DEBUG)
    if opts['--test']:
        import doctest
        failures, tests = doctest.testmod()
        sys.exit(0 if failures == 0 else 1)
    period_words = (opts['--period'] or 'from 3 days ago to tomorrow').split()
    period = abo.period.parse_period(period_words)
    subject_name = ''
    medication = {}
    simulation = {}
    day = None
    days = []
    red = []
    orange = []
    green = []
    when = None
    reports = {}
    reports[datetime.now()] = ' '
    try:
        for path in opts['<path>']:
            for line in abo.text.number_lines(open(path), name=path):
                line = line.rstrip('\n')
                # Parse subject metadata and medication declarations at top of file.
                if day is None:
                    if m := re_subject_name.match(line):
                        subject_name = m.group('name')
                        continue
                    if med := Medication.extract_from_text(line):
                        medication[med.name] = med
                        if med.half_life:
                            simulation[med.name] = Simulation(med)
                        continue
                    if regime := Regime.extract_from_text(line, medication.get):
                        regime.medication.add_regime(datetime.min, regime)
                        continue
                    if re_comment.match(line):
                        continue
                # Skip blank lines.
                if not line: continue
                # Parse HH:MM at start of line, after first day has been parsed.
                # Otherwise non-indented line must parse as "Day DD Mon YYYY".
                if not line[0].isspace():
                    m = re_time_of_day.match(line) if day is not None else None
                    if m:
                        new_when = datetime.combine(day, timeofday(int(m.group('hour')), int(m.group('minute'))))
                        line = line[m.end():]
                        if when is not None:
                            if new_when <= when:
                                raise abo.text.LineError(f'time of day does not advance', line=line)
                        when = new_when
                        logging.debug(f'when = {when}')
                    else:
                        try:
                            new_day = datetime.strptime(line, '%a %d %b %Y').date()
                            logging.debug(f'new_day = {new_day}')
                            if day is not None and new_day <= day:
                                raise abo.text.LineError(f'day does not advance', line=line)
                            when = None
                            day = new_day
                            days.append(day)
                        except ValueError as e:
                            if day is not None:
                                raise abo.text.LineError(f'malformed day: {line!r}', line=line)
                # Skip lines until first day is parsed.
                if day is None: continue
                # Skip over indent.
                line = line.lstrip()
                # Parse single punctuation as reportable line.
                if m := re_reportable.match(line):
                    line = line[m.end():].lstrip()
                    rep = m.group(0)
                    if when is None:
                        raise abo.text.LineError('time of day unknown', line=line)
                    reports[when] = rep
                    (red if rep == '!' else green if rep == '+' else orange).append(when)
                # Parse dose.
                if dose := Dose.extract_from_text(line, when, medication.get):
                    if sim := simulation.get(dose.medication.name):
                        sim.add_dose(dose)
                    continue
    except abo.text.LineError as e:
        fatal(str(e))

    start_datetime = datetime.combine(period[0], timeofday.min)
    end_datetime = datetime.combine(period[1], timeofday.max)

    def filter(datetimes):
        return [t for t in datetimes if t >= start_datetime and t <= end_datetime]

    for sim in simulation.values():
        sim.compute(start_datetime, end_datetime)

    if reports:
        fmt = '{:<17} {:1.1}' + ' {:>12}' * len(simulation)
        print(fmt.format('', '', *simulation.keys()))
        for when in sorted(filter(reports)):
            print(fmt.format(when.strftime(r'%a %_d-%b %H:%M'),
                             reports[when],
                             *(f'{sim.load_at(when):6.1f} mg' for sim in simulation.values())))

    if opts['--graph'] and days:
        times = []
        time = start_datetime
        while time <= end_datetime:
            times.append(time)
            time += timedelta(minutes=15)
        import matplotlib.pyplot as M
        import matplotlib.dates as MD
        fig = M.figure(figsize=(2.0 * (times[-1] - times[0]) / timedelta(days=1), 4.0))
        ax = fig.subplots()
        ax.set_title('Medication loads' + (', ' + subject_name if subject_name else ''))
        ax.set_ylabel('mg')
        ax.xaxis.set_major_locator(MD.DayLocator())
        ax.xaxis.set_minor_locator(MD.HourLocator([0, 6, 12, 18]))
        ax.xaxis.set_major_formatter(MD.DateFormatter('%a %-d\n%b %Y'))
        ax.xaxis.set_minor_formatter(MD.DateFormatter('%H'))
        ax.grid(True, 'major', color='0.7')
        ax.grid(True, 'minor', color='0.9')
        if not opts['--no-now-line']:
            ax.vlines(filter([datetime.now()]), graph_line_min, graph_line_max, color='0', linestyles='solid')
        ax.vlines(filter(red), graph_line_min, graph_line_max, color='tab:red', linestyles='dotted')
        ax.vlines(filter(orange), graph_line_min, graph_line_max, color='tab:orange', linestyles='dotted')
        ax.vlines(filter(green), graph_line_min, graph_line_max, color='tab:green', linestyles='dotted')
        for name, sim in simulation.items():
            doses = [dose for dose in sim.doses if dose.when >= start_datetime and dose.when <= end_datetime]
            lines = ax.plot([dose.when for dose in doses],
                            [sim.medication.get_regime(dose.when).tick_amount for dose in doses],
                            marker='|', linestyle='none')
            ax.plot(times, [sim.load_at(time) for time in times], color=lines[0].get_color())
        M.show()

re_comment = re.compile(r'^#\s*')
re_subject_name = re.compile(r'^#\s*name:\s*(?P<name>.*\S)\s*$')
re_time_of_day = re.compile(r'^(?P<hour>\d\d):(?P<minute>\d\d)\b')
re_reportable = re.compile(r'[^A-Za-z0-9_().-]')
re_non_punctuation = re.compile(r'[^\s,;:]+')
re_start_of_line = re.compile(r'^\s*-?\s*')
re_medication_name = re.compile(r'(?P<name>[A-Z]\S*)')
re_dosage = re.compile(r'(?P<dosage>\d*(?:\.\d+)?|\d+)\s*mg\b')
re_medication = re.compile(re_start_of_line.pattern + 'MED\s+' + re_medication_name.pattern)
re_take_regime = re.compile(re_start_of_line.pattern +
                            'TAKE\s+' + re_medication_name.pattern +
                            r'\s+(?:' + re_dosage.pattern + r')\s+(?P<interval>BD|daily|every\s+' + abo.time.re_hours_minutes.pattern + ')')
re_dose = re.compile(re_start_of_line.pattern + re_medication_name.pattern + r'\s+' + re_dosage.pattern)

def extract(rexp, text):
    m = rexp.search(text)
    if m: text = text[:m.start()] + text[m.end():]
    return m, text

def error_if_any_non_punctuation(text):
    m = re_non_punctuation.search(text)
    if m: raise abo.text.LineError(f'spurious text {m.group(0)!r}', line=text)

def extract_timedelta_tag(tag, text, **kwargs):
    i = text.find(tag)
    if i != -1:
        split = text[i + len(tag):].split(None, 1)
        if len(split) == 0:
            raise abo.text.LineError(f'missing {tag} value', line=text)
        value_str = split[0]
        remain = split[1] if len(split) == 2 else ''
        if m := abo.time.re_hours_minutes.match(value_str):
            return abo.time.from_hours_minutes_match(m), text[:i] + remain
        else:
            raise abo.text.LineError(f'malformed {tag} value: {value_str!r}', line=text)
    if 'default' in kwargs:
        return (kwargs['default'], text)
    raise abo.text.LineError(f'missing {tag!r}', line=text)

class Medication(object):

    @classmethod
    def extract_from_text(cls, text):
        r'''Returns Medication or None.'''
        m, text = extract(re_medication, text)
        if not m: return None
        name = m.group('name')
        half_life, text = extract_timedelta_tag('half-life', text, default=None)
        delay, text = extract_timedelta_tag('delay', text, default=timedelta(0))
        peak, text = extract_timedelta_tag('peak', text, default=timedelta(0))
        error_if_any_non_punctuation(text)
        return cls(name, half_life=half_life, delay=delay, peak=peak)

    def __init__(self, name, half_life, delay, peak):
        assert delay <= peak
        self.name = name
        self.half_life = half_life
        self.delay = delay
        self.peak = peak
        self.regimes = {}
        logging.debug(repr(self))

    def __repr__(self):
        return f'Medication({self.name!r}, half-life={self.half_life!r}, delay={self.delay!r}, peak={self.peak!r})'

    def add_regime(self, from_time, regime):
        assert isinstance(from_time, datetime)
        assert isinstance(regime, Regime)
        self.regimes[from_time] = regime

    def get_regime(self, when):
        regime = None
        for from_time in sorted(self.regimes):
            if when < from_time:
                break
            regime = self.regimes[from_time]
        return regime

class Regime(object):

    @classmethod
    def extract_from_text(cls, text, medication_factory):
        r'''Returns Regime or None.'''
        m, text = extract(re_take_regime, text)
        if not m: return None
        name = m.group('name')
        med = medication_factory(name)
        if not med: raise abo.text.LineError(f'unknown medication: {name!r}', line=text)
        dosage = float(m.group('dosage'))
        interval = None
        i = m.group('interval')
        if i == 'BD': interval = timedelta(hours=12)
        elif i == 'daily': interval = timedelta(hours=24)
        else:
            assert i.startswith('every'), f'i={i!r}'
            interval = abo.time.from_hours_minutes_match(m)
        assert interval is not None, f'i={i!r}'
        error_if_any_non_punctuation(text)
        return cls(med, dosage, interval)

    def __init__(self, medication, dosage, interval):
        assert isinstance(medication, Medication)
        self.medication = medication
        self.dosage = dosage
        self.interval = interval
        self.tick_amount = self._compute_steady_state_peak()

    def _compute_steady_state_peak(self):
        load = 0.
        if self.medication.half_life:
            for i in range(10):
                load *= pow(0.5, self.interval / self.medication.half_life)
                load += self.dosage
            load *= pow(0.5, (self.medication.peak - self.medication.delay) / self.medication.half_life)
        return load

class Dose(object):

    @classmethod
    def extract_from_text(cls, text, when, medication_factory):
        m, text = extract(re_dose, text)
        if not m: return None
        name = m.group('name')
        med = medication_factory(name)
        if not med: return None
        if when is None:
            raise abo.text.LineError('time of day unknown', line=text)
        dosage = float(m.group('dosage'))
        return cls(med, when, dosage)

    def __init__(self, medication, when, dosage):
        assert isinstance(medication, Medication)
        self.medication = medication
        self.when = when
        self.dosage = dosage

    def absorbed(self, when, interval):
        # Absorption model is a simple window: zero during delay, then constant
        # absorption until full load is absorbed at peak interval, then zero.
        start = self.when + self.medication.delay
        window = self.medication.peak - self.medication.delay
        end = start + window
        if when + interval <= start or when >= end: return 0.
        return self.dosage * (min(when + interval, end) - when) / window

class Simulation(object):

    def __init__(self, medication):
        self.medication = medication
        self.doses = []
        self._load = {}
        self.step = timedelta(minutes=1)
        self.epoch = datetime(2000, 1, 1, 0, 0, 0)
        self.first_dose_time = None
        self.last_dose_time = None

    def _floor(self, time):
        assert self.epoch <= time
        return time - (time - self.epoch) % self.step

    def add_dose(self, dose):
        self.doses.append(dose)
        self._load = {}
        if self.first_dose_time is None or dose.when < self.first_dose_time:
            self.first_dose_time = self._floor(dose.when)
        if self.last_dose_time is None or dose.when > self.last_dose_time:
            self.last_dose_time = self._floor(dose.when)

    def compute(self, start_time=None, end_time=None):
        if self.doses and not self._load:
            begin_time = start_time - self.medication.half_life * 10 if start_time else self.first_dose_time
            if not end_time: end_time = self._floor(self.last_dose_time + self.medication.half_life * 10)
            level = 0.
            step_decay = pow(0.5, self.step / self.medication.half_life)
            termwidth, termheight = shutil.get_terminal_size()
            barwidth = termwidth - 18
            last_percent = None
            time = begin_time
            while time <= end_time:
                progress = (time - begin_time) / (end_time - begin_time)
                percent = round(progress * 100)
                if percent != last_percent:
                    bar = ('#' * round(progress * barwidth)).ljust(barwidth) if barwidth > 0 else ''
                    print(f'\r{self.medication.name:<10.10} [{bar}] {percent:>3}%', end='')
                    last_percent = percent
                for dose in self.doses:
                    level += dose.absorbed(time, self.step)
                level *= step_decay
                self._load[time] = level
                time += self.step
            print()

    def load_at(self, when):
        return self._load.get(self._floor(when), 0.)

def fatal(message, status=1):
    print("%s: %s" % (os.path.basename(sys.argv[0]), message), file=sys.stderr)
    sys.exit(status)

if __name__ == "__main__":
    main()
